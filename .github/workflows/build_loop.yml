name: 4. Build Loop
run-name: Build Loop (${{ github.ref_name }})
on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Upload to TestFlight after build (true or false)'
        required: false
        default: 'false'
  schedule:
    - cron: "0 9 * * 3" # Every Wednesday 09:00 UTC
    - cron: "0 7 1 * *" # First of each month at 07:00 UTC

env:
  UPSTREAM_REPO: LoopKit/LoopWorkspace
  UPSTREAM_BRANCH: ${{ github.ref_name }}
  TARGET_BRANCH: ${{ github.ref_name }}
  ALIVE_BRANCH_MAIN: alive-main
  ALIVE_BRANCH_DEV: alive-dev

jobs:
  check_certs:
    name: Check certificates
    uses: ./.github/workflows/create_certs.yml
    secrets: inherit

  check_alive_and_permissions:
    needs: check_certs
    runs-on: ubuntu-latest
    name: Check alive branch and permissions
    permissions:
      contents: write
    outputs:
      WORKFLOW_PERMISSION: ${{ steps.workflow-permission.outputs.has_permission }}

    steps:
      - name: Check for workflow permissions
        id: workflow-permission
        env:
          TOKEN_TO_CHECK: ${{ secrets.GH_PAT }}
        run: |
          PERMISSIONS=$(curl -sS -f -I -H "Authorization: token ${{ env.TOKEN_TO_CHECK }}" https://api.github.com | grep ^x-oauth-scopes: | cut -d' ' -f2-);
          if [[ $PERMISSIONS =~ "workflow" || $PERMISSIONS == "" ]]; then
            echo "has_permission=true" >> $GITHUB_OUTPUT
          else 
            echo "has_permission=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for alive branches
        if: steps.workflow-permission.outputs.has_permission == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          if [[ $(gh api -H "Accept: application/vnd.github+json" /repos/${{ github.repository_owner }}/LoopWorkspace/branches | jq --raw-output '[.[] | select(.name == "alive-main" or .name == "alive-dev")] | length > 0') == "true" ]]; then
            echo "ALIVE_BRANCH_EXISTS=true" >> $GITHUB_ENV
          else
            echo "ALIVE_BRANCH_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create alive branches
        if: env.ALIVE_BRANCH_EXISTS == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          SHA_MAIN=$(curl -sS -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/${{ env.UPSTREAM_REPO }}/git/refs/heads/main | jq -r '.object.sha')
          SHA_DEV=$(curl -sS -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/${{ env.UPSTREAM_REPO }}/git/refs/heads/dev | jq -r '.object.sha')
          gh api --method POST -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" /repos/${{ github.repository_owner }}/LoopWorkspace/git/refs -f ref='refs/heads/alive-main' -f sha=$SHA_MAIN
          gh api --method POST -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" /repos/${{ github.repository_owner }}/LoopWorkspace/git/refs -f ref='refs/heads/alive-dev' -f sha=$SHA_DEV

  check_latest_from_upstream:
    needs: [check_certs, check_alive_and_permissions]
    runs-on: ubuntu-latest
    name: Check upstream and keep alive
    outputs:
      NEW_COMMITS: ${{ steps.sync.outputs.has_new_commits }}
      ABORT_SYNC: ${{ steps.check_branch.outputs.ABORT_SYNC }}

    steps:
      - name: Check branch context
        id: check_branch
        run: |
          REF_NAME="${GITHUB_REF##*/}"
          if [ "$REF_NAME" = "main" ]; then
            echo "ALIVE_BRANCH=${{ env.ALIVE_BRANCH_MAIN }}" >> $GITHUB_OUTPUT
            echo "ABORT_SYNC=false" >> $GITHUB_OUTPUT
          elif [ "$REF_NAME" = "dev" ]; then
            echo "ALIVE_BRANCH=${{ env.ALIVE_BRANCH_DEV }}" >> $GITHUB_OUTPUT
            echo "ABORT_SYNC=false" >> $GITHUB_OUTPUT
          else
            echo "ABORT_SYNC=true" >> $GITHUB_OUTPUT
          fi

      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          ref: ${{ steps.check_branch.outputs.ALIVE_BRANCH }}

      - name: Sync upstream changes
        if: github.repository_owner != 'LoopKit' && steps.check_branch.outputs.ABORT_SYNC == 'false'
        id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@v3.4.1
        with:
          target_sync_branch: ${{ steps.check_branch.outputs.ALIVE_BRANCH }}
          shallow_since: 6 months ago
          target_repo_token: ${{ secrets.GH_PAT }}
          upstream_sync_branch: ${{ env.UPSTREAM_BRANCH }}
          upstream_sync_repo: ${{ env.UPSTREAM_REPO }}

  build:
    name: Build
    needs: [check_certs, check_alive_and_permissions, check_latest_from_upstream]
    runs-on: macos-15
    permissions:
      contents: write
    if: |
      github.event_name == 'workflow_dispatch' ||
      (needs.check_alive_and_permissions.outputs.WORKFLOW_PERMISSION == 'true' &&
        (github.event.schedule == '0 7 1 * *' || needs.check_latest_from_upstream.outputs.NEW_COMMITS == 'true'))

    steps:
      - name: Select Xcode version
        run: "sudo xcode-select --switch /Applications/Xcode_16.3.app/Contents/Developer"

      - name: Checkout for syncing
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          ref: ${{ env.TARGET_BRANCH }}

      - name: Sync upstream
        if: github.repository_owner != 'LoopKit' && needs.check_latest_from_upstream.outputs.ABORT_SYNC == 'false'
        id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@v3.4.1
        with:
          target_sync_branch: ${{ env.TARGET_BRANCH }}
          shallow_since: 6 months ago
          target_repo_token: ${{ secrets.GH_PAT }}
          upstream_sync_branch: ${{ env.UPSTREAM_BRANCH }}
          upstream_sync_repo: ${{ env.UPSTREAM_REPO }}

      - name: Checkout for build
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          submodules: recursive
          ref: ${{ env.TARGET_BRANCH }}

      - name: Customize Loop
        run: |
          if $(ls ./patches/* &> /dev/null); then
            git apply ./patches/* --allow-empty -v --whitespace=fix
          fi

      - name: Patch Match Tables
        run: |
          TABLE_PRINTER_PATH=$(ruby -e 'puts Gem::Specification.find_by_name("fastlane").gem_dir')/match/lib/match/table_printer.rb
          if [ -f "$TABLE_PRINTER_PATH" ]; then
            sed -i "" "/puts(Terminal::Table.new(params))/d" "$TABLE_PRINTER_PATH"
          fi

      - name: Install dependencies
        run: bundle install

      - name: Sync clock
        run: sudo sntp -sS time.windows.com

      - name: Fastlane Build & Archive
        run: bundle exec fastlane build_loop
        env:
          TEAMID: ${{ secrets.TEAMID }}
          GH_PAT: ${{ secrets.GH_PAT }}
          FASTLANE_KEY_ID: ${{ secrets.FASTLANE_KEY_ID }}
          FASTLANE_ISSUER_ID: ${{ secrets.FASTLANE_ISSUER_ID }}
          FASTLANE_KEY: ${{ secrets.FASTLANE_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}

      - name: Fastlane upload to TestFlight
        run: bundle exec fastlane release
        env:
          TEAMID: ${{ secrets.TEAMID }}
          GH_PAT: ${{ secrets.GH_PAT }}
          FASTLANE_KEY_ID: ${{ secrets.FASTLANE_KEY_ID }}
          FASTLANE_ISSUER_ID: ${{ secrets.FASTLANE_ISSUER_ID }}
          FASTLANE_KEY: ${{ secrets.FASTLANE_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            artifacts
            buildlog
